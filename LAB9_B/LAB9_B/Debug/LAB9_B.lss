
LAB9_B.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000fa  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001e  00800060  000000fa  0000016e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000018c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001bc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  000001f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000600  00000000  00000000  00000228  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000586  00000000  00000000  00000828  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000021d  00000000  00000000  00000dae  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000054  00000000  00000000  00000fcc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002f4  00000000  00000000  00001020  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000007c  00000000  00000000  00001314  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  00001390  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea ef       	ldi	r30, 0xFA	; 250
  68:	f0 e0       	ldi	r31, 0x00	; 0
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ae 37       	cpi	r26, 0x7E	; 126
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 4c 00 	call	0x98	; 0x98 <main>
  7a:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <usart_init>:

#include <avr/io.h>

void usart_init(void)
{
	UCSRB=(1<<TXEN);
  82:	88 e0       	ldi	r24, 0x08	; 8
  84:	8a b9       	out	0x0a, r24	; 10
	UCSRC=(1<<UCSZ1)|(1<<UCSZ0)|(1<<URSEL);
  86:	86 e8       	ldi	r24, 0x86	; 134
  88:	80 bd       	out	0x20, r24	; 32
	UBRRL=0x33;
  8a:	83 e3       	ldi	r24, 0x33	; 51
  8c:	89 b9       	out	0x09, r24	; 9
  8e:	08 95       	ret

00000090 <usart_send>:
}
void usart_send(unsigned char ch)
{
	while(!(UCSRA & ( 1 << UDRE )));
  90:	5d 9b       	sbis	0x0b, 5	; 11
  92:	fe cf       	rjmp	.-4      	; 0x90 <usart_send>
	UDR=ch;
  94:	8c b9       	out	0x0c, r24	; 12
  96:	08 95       	ret

00000098 <main>:




int main(void)
{
  98:	cf 93       	push	r28
  9a:	df 93       	push	r29
  9c:	cd b7       	in	r28, 0x3d	; 61
  9e:	de b7       	in	r29, 0x3e	; 62
  a0:	6e 97       	sbiw	r28, 0x1e	; 30
  a2:	0f b6       	in	r0, 0x3f	; 63
  a4:	f8 94       	cli
  a6:	de bf       	out	0x3e, r29	; 62
  a8:	0f be       	out	0x3f, r0	; 63
  aa:	cd bf       	out	0x3d, r28	; 61
	unsigned char  str[30]="My Name is Mayank";
  ac:	82 e1       	ldi	r24, 0x12	; 18
  ae:	e0 e6       	ldi	r30, 0x60	; 96
  b0:	f0 e0       	ldi	r31, 0x00	; 0
  b2:	de 01       	movw	r26, r28
  b4:	11 96       	adiw	r26, 0x01	; 1
  b6:	01 90       	ld	r0, Z+
  b8:	0d 92       	st	X+, r0
  ba:	8a 95       	dec	r24
  bc:	e1 f7       	brne	.-8      	; 0xb6 <main+0x1e>
  be:	fe 01       	movw	r30, r28
  c0:	73 96       	adiw	r30, 0x13	; 19
  c2:	8c e0       	ldi	r24, 0x0C	; 12
  c4:	df 01       	movw	r26, r30
  c6:	1d 92       	st	X+, r1
  c8:	8a 95       	dec	r24
  ca:	e9 f7       	brne	.-6      	; 0xc6 <main+0x2e>
	unsigned char strLength=30;
	unsigned char i=0;
	usart_init();
  cc:	0e 94 41 00 	call	0x82	; 0x82 <usart_init>

int main(void)
{
	unsigned char  str[30]="My Name is Mayank";
	unsigned char strLength=30;
	unsigned char i=0;
  d0:	80 e0       	ldi	r24, 0x00	; 0
  d2:	03 c0       	rjmp	.+6      	; 0xda <main+0x42>
	usart_init();
	while (1)
	{
		usart_send(str[i++]);
  d4:	81 2f       	mov	r24, r17
  d6:	01 c0       	rjmp	.+2      	; 0xda <main+0x42>
		if (i>=strLength)
			i=0;
  d8:	80 e0       	ldi	r24, 0x00	; 0
	unsigned char strLength=30;
	unsigned char i=0;
	usart_init();
	while (1)
	{
		usart_send(str[i++]);
  da:	11 e0       	ldi	r17, 0x01	; 1
  dc:	18 0f       	add	r17, r24
  de:	e1 e0       	ldi	r30, 0x01	; 1
  e0:	f0 e0       	ldi	r31, 0x00	; 0
  e2:	ec 0f       	add	r30, r28
  e4:	fd 1f       	adc	r31, r29
  e6:	e8 0f       	add	r30, r24
  e8:	f1 1d       	adc	r31, r1
  ea:	80 81       	ld	r24, Z
  ec:	0e 94 48 00 	call	0x90	; 0x90 <usart_send>
		if (i>=strLength)
  f0:	1e 31       	cpi	r17, 0x1E	; 30
  f2:	90 f7       	brcc	.-28     	; 0xd8 <main+0x40>
  f4:	ef cf       	rjmp	.-34     	; 0xd4 <main+0x3c>

000000f6 <_exit>:
  f6:	f8 94       	cli

000000f8 <__stop_program>:
  f8:	ff cf       	rjmp	.-2      	; 0xf8 <__stop_program>
