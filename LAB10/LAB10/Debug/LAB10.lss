
LAB10.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000017a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001ce  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001ce  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000200  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  0000023c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008bd  00000000  00000000  0000027c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000064d  00000000  00000000  00000b39  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000360  00000000  00000000  00001186  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000070  00000000  00000000  000014e8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000344  00000000  00000000  00001558  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000200  00000000  00000000  0000189c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00001a9c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 76 00 	call	0xec	; 0xec <main>
  64:	0c 94 bb 00 	jmp	0x176	; 0x176 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <lcd_cmd>:
#include <util/delay.h>


void lcd_cmd(unsigned char cmd) //create function to send commands to lcd
{
	PORTD = cmd; //using PortD for sending  command
  6c:	82 bb       	out	0x12, r24	; 18
	PORTC = 0x04; //using PortC for controlling lcd with RS,RW, Enable
  6e:	84 e0       	ldi	r24, 0x04	; 4
  70:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  72:	8f e3       	ldi	r24, 0x3F	; 63
  74:	9c e9       	ldi	r25, 0x9C	; 156
  76:	01 97       	sbiw	r24, 0x01	; 1
  78:	f1 f7       	brne	.-4      	; 0x76 <lcd_cmd+0xa>
  7a:	00 c0       	rjmp	.+0      	; 0x7c <lcd_cmd+0x10>
  7c:	00 00       	nop
	_delay_ms(10);
	PORTC = 0x00;
  7e:	15 ba       	out	0x15, r1	; 21
  80:	08 95       	ret

00000082 <lcd_data>:
}
void lcd_data (unsigned char data)
{
	PORTD = data; //using PortB for sending data
  82:	82 bb       	out	0x12, r24	; 18
	PORTC = 0x05; //using PortC for controlling lcd with RS,RW, Enable
  84:	85 e0       	ldi	r24, 0x05	; 5
  86:	85 bb       	out	0x15, r24	; 21
  88:	8f e3       	ldi	r24, 0x3F	; 63
  8a:	9c e9       	ldi	r25, 0x9C	; 156
  8c:	01 97       	sbiw	r24, 0x01	; 1
  8e:	f1 f7       	brne	.-4      	; 0x8c <lcd_data+0xa>
  90:	00 c0       	rjmp	.+0      	; 0x92 <lcd_data+0x10>
  92:	00 00       	nop
	_delay_ms(10);
	PORTC = 0x01;
  94:	81 e0       	ldi	r24, 0x01	; 1
  96:	85 bb       	out	0x15, r24	; 21
  98:	08 95       	ret

0000009a <convertndisplay>:
}

void convertndisplay(unsigned char value)
{
  9a:	cf 93       	push	r28
  9c:	df 93       	push	r29
	unsigned char x,d1,d2;
	x=value/10;
  9e:	cd ec       	ldi	r28, 0xCD	; 205
  a0:	8c 9f       	mul	r24, r28
  a2:	c1 2d       	mov	r28, r1
  a4:	11 24       	eor	r1, r1
  a6:	c6 95       	lsr	r28
  a8:	c6 95       	lsr	r28
  aa:	c6 95       	lsr	r28
	d1=x;
	d2=value%10;
  ac:	2c 2f       	mov	r18, r28
  ae:	22 0f       	add	r18, r18
  b0:	92 2f       	mov	r25, r18
  b2:	99 0f       	add	r25, r25
  b4:	99 0f       	add	r25, r25
  b6:	92 0f       	add	r25, r18
  b8:	d8 2f       	mov	r29, r24
  ba:	d9 1b       	sub	r29, r25
	lcd_cmd(0X8D);
  bc:	8d e8       	ldi	r24, 0x8D	; 141
  be:	0e 94 36 00 	call	0x6c	; 0x6c <lcd_cmd>
	lcd_data(d1+0x30);
  c2:	80 e3       	ldi	r24, 0x30	; 48
  c4:	8c 0f       	add	r24, r28
  c6:	0e 94 41 00 	call	0x82	; 0x82 <lcd_data>
	lcd_data(d2+0x30);
  ca:	80 e3       	ldi	r24, 0x30	; 48
  cc:	8d 0f       	add	r24, r29
  ce:	0e 94 41 00 	call	0x82	; 0x82 <lcd_data>
}
  d2:	df 91       	pop	r29
  d4:	cf 91       	pop	r28
  d6:	08 95       	ret

000000d8 <lcd_init>:

void lcd_init ()
{
	
	lcd_cmd(0x38);
  d8:	88 e3       	ldi	r24, 0x38	; 56
  da:	0e 94 36 00 	call	0x6c	; 0x6c <lcd_cmd>
	lcd_cmd(0x0F);
  de:	8f e0       	ldi	r24, 0x0F	; 15
  e0:	0e 94 36 00 	call	0x6c	; 0x6c <lcd_cmd>
	lcd_cmd(0x01);
  e4:	81 e0       	ldi	r24, 0x01	; 1
  e6:	0e 94 36 00 	call	0x6c	; 0x6c <lcd_cmd>
  ea:	08 95       	ret

000000ec <main>:
	
}
int main(void) {
	DDRB = 0xFF;
  ec:	8f ef       	ldi	r24, 0xFF	; 255
  ee:	87 bb       	out	0x17, r24	; 23
	DDRC = 0xFF;
  f0:	84 bb       	out	0x14, r24	; 20
	lcd_init();
  f2:	0e 94 6c 00 	call	0xd8	; 0xd8 <lcd_init>
	lcd_cmd(0x80);
  f6:	80 e8       	ldi	r24, 0x80	; 128
  f8:	0e 94 36 00 	call	0x6c	; 0x6c <lcd_cmd>
	lcd_data('T');
  fc:	84 e5       	ldi	r24, 0x54	; 84
  fe:	0e 94 41 00 	call	0x82	; 0x82 <lcd_data>
	lcd_data('E');
 102:	85 e4       	ldi	r24, 0x45	; 69
 104:	0e 94 41 00 	call	0x82	; 0x82 <lcd_data>
	lcd_data('M');
 108:	8d e4       	ldi	r24, 0x4D	; 77
 10a:	0e 94 41 00 	call	0x82	; 0x82 <lcd_data>
	lcd_data('P');
 10e:	80 e5       	ldi	r24, 0x50	; 80
 110:	0e 94 41 00 	call	0x82	; 0x82 <lcd_data>
	lcd_data('E');
 114:	85 e4       	ldi	r24, 0x45	; 69
 116:	0e 94 41 00 	call	0x82	; 0x82 <lcd_data>
	lcd_data('R');
 11a:	82 e5       	ldi	r24, 0x52	; 82
 11c:	0e 94 41 00 	call	0x82	; 0x82 <lcd_data>
	lcd_data('A');
 120:	81 e4       	ldi	r24, 0x41	; 65
 122:	0e 94 41 00 	call	0x82	; 0x82 <lcd_data>
	lcd_data('T');
 126:	84 e5       	ldi	r24, 0x54	; 84
 128:	0e 94 41 00 	call	0x82	; 0x82 <lcd_data>
	lcd_data('U');
 12c:	85 e5       	ldi	r24, 0x55	; 85
 12e:	0e 94 41 00 	call	0x82	; 0x82 <lcd_data>
	lcd_data('R');
 132:	82 e5       	ldi	r24, 0x52	; 82
 134:	0e 94 41 00 	call	0x82	; 0x82 <lcd_data>
	lcd_data('E');
 138:	85 e4       	ldi	r24, 0x45	; 69
 13a:	0e 94 41 00 	call	0x82	; 0x82 <lcd_data>
	lcd_data(':');
 13e:	8a e3       	ldi	r24, 0x3A	; 58
 140:	0e 94 41 00 	call	0x82	; 0x82 <lcd_data>
	
	DDRA |=(1<<0);
 144:	8a b3       	in	r24, 0x1a	; 26
 146:	81 60       	ori	r24, 0x01	; 1
 148:	8a bb       	out	0x1a, r24	; 26
	ADCSRA = 0x87;    // make ADC enable and c/128
 14a:	87 e8       	ldi	r24, 0x87	; 135
 14c:	86 b9       	out	0x06, r24	; 6
	ADMUX=0xE0;       // 2.56V Vref and ADC0 single ended data will be left justified
 14e:	80 ee       	ldi	r24, 0xE0	; 224
 150:	87 b9       	out	0x07, r24	; 7
	while (1)
	{
		ADCSRA |= (1<<ADSC);
 152:	86 b1       	in	r24, 0x06	; 6
 154:	80 64       	ori	r24, 0x40	; 64
 156:	86 b9       	out	0x06, r24	; 6
		while ((ADCSRA&(1<<ADIF))==0);
 158:	34 9b       	sbis	0x06, 4	; 6
 15a:	fe cf       	rjmp	.-4      	; 0x158 <main+0x6c>
			unsigned char data=ADCH;
 15c:	85 b1       	in	r24, 0x05	; 5
			convertndisplay(data);
 15e:	0e 94 4d 00 	call	0x9a	; 0x9a <convertndisplay>
 162:	2f ef       	ldi	r18, 0xFF	; 255
 164:	89 e6       	ldi	r24, 0x69	; 105
 166:	98 e1       	ldi	r25, 0x18	; 24
 168:	21 50       	subi	r18, 0x01	; 1
 16a:	80 40       	sbci	r24, 0x00	; 0
 16c:	90 40       	sbci	r25, 0x00	; 0
 16e:	e1 f7       	brne	.-8      	; 0x168 <main+0x7c>
 170:	00 c0       	rjmp	.+0      	; 0x172 <main+0x86>
 172:	00 00       	nop
 174:	ee cf       	rjmp	.-36     	; 0x152 <main+0x66>

00000176 <_exit>:
 176:	f8 94       	cli

00000178 <__stop_program>:
 178:	ff cf       	rjmp	.-2      	; 0x178 <__stop_program>
