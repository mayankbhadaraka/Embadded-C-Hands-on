
LAB8(MiniProject).elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001f0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000e  00800060  000001f0  00000264  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000272  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002a4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000050  00000000  00000000  000002e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000965  00000000  00000000  00000330  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000638  00000000  00000000  00000c95  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000401  00000000  00000000  000012cd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000098  00000000  00000000  000016d0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000363  00000000  00000000  00001768  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000371  00000000  00000000  00001acb  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  00001e3c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 ef       	ldi	r30, 0xF0	; 240
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ae 36       	cpi	r26, 0x6E	; 110
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 8e 00 	call	0x11c	; 0x11c <main>
  7a:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <lcd_cmd>:
#include <avr/io.h>
#include <util/delay.h>

void lcd_cmd(unsigned char cmd) //create function to send commands to lcd
{
	PORTA = cmd; //using PortD for sending  command
  82:	8b bb       	out	0x1b, r24	; 27
	PORTB = 0x04; //using PortC for controlling lcd with RS,RW, Enable
  84:	84 e0       	ldi	r24, 0x04	; 4
  86:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  88:	8f e3       	ldi	r24, 0x3F	; 63
  8a:	9c e9       	ldi	r25, 0x9C	; 156
  8c:	01 97       	sbiw	r24, 0x01	; 1
  8e:	f1 f7       	brne	.-4      	; 0x8c <lcd_cmd+0xa>
  90:	00 c0       	rjmp	.+0      	; 0x92 <lcd_cmd+0x10>
  92:	00 00       	nop
	_delay_ms(10);
	PORTB = 0x00;
  94:	18 ba       	out	0x18, r1	; 24
  96:	08 95       	ret

00000098 <lcd_data>:
}
void lcd_data (unsigned char data)
{
	PORTA = data; //using PortB for sending data
  98:	8b bb       	out	0x1b, r24	; 27
	PORTB = 0x05; //using PortC for controlling lcd with RS,RW, Enable
  9a:	85 e0       	ldi	r24, 0x05	; 5
  9c:	88 bb       	out	0x18, r24	; 24
  9e:	8f e3       	ldi	r24, 0x3F	; 63
  a0:	9c e9       	ldi	r25, 0x9C	; 156
  a2:	01 97       	sbiw	r24, 0x01	; 1
  a4:	f1 f7       	brne	.-4      	; 0xa2 <lcd_data+0xa>
  a6:	00 c0       	rjmp	.+0      	; 0xa8 <lcd_data+0x10>
  a8:	00 00       	nop
	_delay_ms(10);
	PORTB = 0x01;
  aa:	81 e0       	ldi	r24, 0x01	; 1
  ac:	88 bb       	out	0x18, r24	; 24
  ae:	08 95       	ret

000000b0 <lcd_init>:
}
void lcd_init ()
{
	lcd_cmd(0x01);
  b0:	81 e0       	ldi	r24, 0x01	; 1
  b2:	0e 94 41 00 	call	0x82	; 0x82 <lcd_cmd>
	lcd_cmd(0x38);
  b6:	88 e3       	ldi	r24, 0x38	; 56
  b8:	0e 94 41 00 	call	0x82	; 0x82 <lcd_cmd>
	lcd_cmd(0x0F);
  bc:	8f e0       	ldi	r24, 0x0F	; 15
  be:	0e 94 41 00 	call	0x82	; 0x82 <lcd_cmd>
  c2:	08 95       	ret

000000c4 <key_open>:
}

int key_open()
{
	unsigned char Y;
	 PORTD=0xFF;
  c4:	8f ef       	ldi	r24, 0xFF	; 255
  c6:	82 bb       	out	0x12, r24	; 18
	 Y=PINC & 0xFF;
  c8:	83 b3       	in	r24, 0x13	; 19
	if(Y==0xFF)
  ca:	8f 3f       	cpi	r24, 0xFF	; 255
  cc:	31 f4       	brne	.+12     	; 0xda <key_open+0x16>
	{
		lcd_data('O');
  ce:	8f e4       	ldi	r24, 0x4F	; 79
  d0:	0e 94 4c 00 	call	0x98	; 0x98 <lcd_data>
		return 1;
  d4:	81 e0       	ldi	r24, 0x01	; 1
  d6:	90 e0       	ldi	r25, 0x00	; 0
  d8:	08 95       	ret
	}
	else
	{
		lcd_data('C');
  da:	83 e4       	ldi	r24, 0x43	; 67
  dc:	0e 94 4c 00 	call	0x98	; 0x98 <lcd_data>
	}
}
  e0:	08 95       	ret

000000e2 <key_Down>:

int key_Down()
{
	unsigned char X,Y;
	X=PINC;
  e2:	83 b3       	in	r24, 0x13	; 19
	Y=X&0xFF;
	if (Y!=0xFF)
  e4:	8f 3f       	cpi	r24, 0xFF	; 255
  e6:	19 f0       	breq	.+6      	; 0xee <key_Down+0xc>
		return 1;
  e8:	81 e0       	ldi	r24, 0x01	; 1
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	08 95       	ret
}
  ee:	08 95       	ret

000000f0 <LCD_String>:
void LCD_String (char *str)
{
  f0:	0f 93       	push	r16
  f2:	1f 93       	push	r17
  f4:	cf 93       	push	r28
  f6:	df 93       	push	r29
  f8:	8c 01       	movw	r16, r24
	int i;
	for(i=0;str[i]!=0;i++)  /* send each char of string till the NULL */
  fa:	c0 e0       	ldi	r28, 0x00	; 0
  fc:	d0 e0       	ldi	r29, 0x00	; 0
  fe:	03 c0       	rjmp	.+6      	; 0x106 <LCD_String+0x16>
	{
		lcd_data(str[i]);  /* call LCD data write */
 100:	0e 94 4c 00 	call	0x98	; 0x98 <lcd_data>
		return 1;
}
void LCD_String (char *str)
{
	int i;
	for(i=0;str[i]!=0;i++)  /* send each char of string till the NULL */
 104:	21 96       	adiw	r28, 0x01	; 1
 106:	f8 01       	movw	r30, r16
 108:	ec 0f       	add	r30, r28
 10a:	fd 1f       	adc	r31, r29
 10c:	80 81       	ld	r24, Z
 10e:	81 11       	cpse	r24, r1
 110:	f7 cf       	rjmp	.-18     	; 0x100 <LCD_String+0x10>
	{
		lcd_data(str[i]);  /* call LCD data write */
	}
}
 112:	df 91       	pop	r29
 114:	cf 91       	pop	r28
 116:	1f 91       	pop	r17
 118:	0f 91       	pop	r16
 11a:	08 95       	ret

0000011c <main>:


int main(void)
{
    DDRA=0xFF;
 11c:	8f ef       	ldi	r24, 0xFF	; 255
 11e:	8a bb       	out	0x1a, r24	; 26
	DDRB=0xFF;
 120:	87 bb       	out	0x17, r24	; 23
	DDRD=0xFF;
 122:	81 bb       	out	0x11, r24	; 17
	DDRC=0x00;
 124:	14 ba       	out	0x14, r1	; 20
	unsigned char Y;
	lcd_init();
 126:	0e 94 58 00 	call	0xb0	; 0xb0 <lcd_init>
	LCD_String("Praced keys:");
 12a:	80 e6       	ldi	r24, 0x60	; 96
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	0e 94 78 00 	call	0xf0	; 0xf0 <LCD_String>
	lcd_cmd(0xC0);
 132:	80 ec       	ldi	r24, 0xC0	; 192
 134:	0e 94 41 00 	call	0x82	; 0x82 <lcd_cmd>
    while (1) 
    {
		
		if (key_open()==1)
 138:	0e 94 62 00 	call	0xc4	; 0xc4 <key_open>
 13c:	01 97       	sbiw	r24, 0x01	; 1
 13e:	e1 f7       	brne	.-8      	; 0x138 <main+0x1c>
		{
			
			if (key_Down()==1)
 140:	0e 94 71 00 	call	0xe2	; 0xe2 <key_Down>
 144:	01 97       	sbiw	r24, 0x01	; 1
 146:	c1 f7       	brne	.-16     	; 0x138 <main+0x1c>
 148:	8f e3       	ldi	r24, 0x3F	; 63
 14a:	9c e9       	ldi	r25, 0x9C	; 156
 14c:	01 97       	sbiw	r24, 0x01	; 1
 14e:	f1 f7       	brne	.-4      	; 0x14c <main+0x30>
 150:	00 c0       	rjmp	.+0      	; 0x152 <main+0x36>
 152:	00 00       	nop
			{
				_delay_ms(10);
				if (key_Down()==1)
 154:	0e 94 71 00 	call	0xe2	; 0xe2 <key_Down>
 158:	01 97       	sbiw	r24, 0x01	; 1
 15a:	71 f7       	brne	.-36     	; 0x138 <main+0x1c>
				{
					PORTD=0x00;
 15c:	12 ba       	out	0x12, r1	; 18
					Y=(PINC & 0XFF);
 15e:	83 b3       	in	r24, 0x13	; 19

					if (Y==0x01)
 160:	81 30       	cpi	r24, 0x01	; 1
 162:	71 f4       	brne	.+28     	; 0x180 <main+0x64>
					{
						if (PORTD=0x01)
 164:	82 bb       	out	0x12, r24	; 18
						{
							lcd_data('1');
 166:	81 e3       	ldi	r24, 0x31	; 49
 168:	0e 94 4c 00 	call	0x98	; 0x98 <lcd_data>
 16c:	9f ef       	ldi	r25, 0xFF	; 255
 16e:	20 e7       	ldi	r18, 0x70	; 112
 170:	82 e0       	ldi	r24, 0x02	; 2
 172:	91 50       	subi	r25, 0x01	; 1
 174:	20 40       	sbci	r18, 0x00	; 0
 176:	80 40       	sbci	r24, 0x00	; 0
 178:	e1 f7       	brne	.-8      	; 0x172 <main+0x56>
 17a:	00 c0       	rjmp	.+0      	; 0x17c <main+0x60>
 17c:	00 00       	nop
 17e:	33 c0       	rjmp	.+102    	; 0x1e6 <main+0xca>
							lcd_data('D');
							_delay_ms(50);
							break;
						}
					}
					else if (Y==0x02)
 180:	82 30       	cpi	r24, 0x02	; 2
 182:	79 f4       	brne	.+30     	; 0x1a2 <main+0x86>
					{
						if (PORTD=0x01)
 184:	81 e0       	ldi	r24, 0x01	; 1
 186:	82 bb       	out	0x12, r24	; 18
						{
							lcd_data('2');
 188:	82 e3       	ldi	r24, 0x32	; 50
 18a:	0e 94 4c 00 	call	0x98	; 0x98 <lcd_data>
 18e:	9f ef       	ldi	r25, 0xFF	; 255
 190:	20 e7       	ldi	r18, 0x70	; 112
 192:	82 e0       	ldi	r24, 0x02	; 2
 194:	91 50       	subi	r25, 0x01	; 1
 196:	20 40       	sbci	r18, 0x00	; 0
 198:	80 40       	sbci	r24, 0x00	; 0
 19a:	e1 f7       	brne	.-8      	; 0x194 <main+0x78>
 19c:	00 c0       	rjmp	.+0      	; 0x19e <main+0x82>
 19e:	00 00       	nop
 1a0:	22 c0       	rjmp	.+68     	; 0x1e6 <main+0xca>
							lcd_data('E');
							_delay_ms(50);
							break;
						}
					}
					else if (Y==0x04)
 1a2:	84 30       	cpi	r24, 0x04	; 4
 1a4:	79 f4       	brne	.+30     	; 0x1c4 <main+0xa8>
					{
						if (PORTD=0x01)
 1a6:	81 e0       	ldi	r24, 0x01	; 1
 1a8:	82 bb       	out	0x12, r24	; 18
						{
							lcd_data('3');
 1aa:	83 e3       	ldi	r24, 0x33	; 51
 1ac:	0e 94 4c 00 	call	0x98	; 0x98 <lcd_data>
 1b0:	9f ef       	ldi	r25, 0xFF	; 255
 1b2:	20 e7       	ldi	r18, 0x70	; 112
 1b4:	82 e0       	ldi	r24, 0x02	; 2
 1b6:	91 50       	subi	r25, 0x01	; 1
 1b8:	20 40       	sbci	r18, 0x00	; 0
 1ba:	80 40       	sbci	r24, 0x00	; 0
 1bc:	e1 f7       	brne	.-8      	; 0x1b6 <main+0x9a>
 1be:	00 c0       	rjmp	.+0      	; 0x1c0 <main+0xa4>
 1c0:	00 00       	nop
 1c2:	11 c0       	rjmp	.+34     	; 0x1e6 <main+0xca>
							lcd_data('F');
							_delay_ms(50);
							break;
						}
					}
					else if (Y==0x08)
 1c4:	88 30       	cpi	r24, 0x08	; 8
 1c6:	09 f0       	breq	.+2      	; 0x1ca <main+0xae>
 1c8:	b7 cf       	rjmp	.-146    	; 0x138 <main+0x1c>
					{
						if (PORTD=0x01)
 1ca:	81 e0       	ldi	r24, 0x01	; 1
 1cc:	82 bb       	out	0x12, r24	; 18
						{
							lcd_data('4');
 1ce:	84 e3       	ldi	r24, 0x34	; 52
 1d0:	0e 94 4c 00 	call	0x98	; 0x98 <lcd_data>
 1d4:	9f ef       	ldi	r25, 0xFF	; 255
 1d6:	20 e7       	ldi	r18, 0x70	; 112
 1d8:	82 e0       	ldi	r24, 0x02	; 2
 1da:	91 50       	subi	r25, 0x01	; 1
 1dc:	20 40       	sbci	r18, 0x00	; 0
 1de:	80 40       	sbci	r24, 0x00	; 0
 1e0:	e1 f7       	brne	.-8      	; 0x1da <main+0xbe>
 1e2:	00 c0       	rjmp	.+0      	; 0x1e4 <main+0xc8>
 1e4:	00 00       	nop
				}
			}
			
		}
    }
}
 1e6:	80 e0       	ldi	r24, 0x00	; 0
 1e8:	90 e0       	ldi	r25, 0x00	; 0
 1ea:	08 95       	ret

000001ec <_exit>:
 1ec:	f8 94       	cli

000001ee <__stop_program>:
 1ee:	ff cf       	rjmp	.-2      	; 0x1ee <__stop_program>
